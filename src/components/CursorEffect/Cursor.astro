---

---
<canvas id="canvas"></canvas>

<style>
    #canvas {
        position: fixed;
        left:0;
        top:0;
        pointer-events: none;
        z-index: -100;
    }
</style>

<script>
    const canvas = document.getElementById('canvas');
    canvas.width = window.innerWidth;   // set canvas width to window width
    canvas.height = window.innerHeight; // set canvas height to window height
    const ctx = canvas.getContext('2d');    // 2d context
    let spots = []; // creates an array of spots
    let hue = 274;    // Sets the color of the particles
    
    const mouse = {  
        x: undefined,   // mouse position
        y: undefined    // mouse position
    }

    window.addEventListener('mousemove', function(event: MouseEvent) { // listens for mouse movement
        mouse.x = event.x;  //event.x is the x coordinate of the mouse
        mouse.y = event.y; //event.y is the y coordinate of the mouse
        for (let i = 0; i < 3; i++) { // 3 is the number of particles
            spots.push(new Particle()); // add a new particle
        }
    });

    class Particle {
        constructor() {
            this.x = mouse.x;
            this.y = mouse.y;
            this.size = Math.random() * 2 + 0.1;    
            this.speedX = Math.random() * 2 - 1;    
            this.speedY = Math.random() * 2 - 1;
            this.color = `hsl(170, 100%, 50%)`;
        }
        update(){
            this.x += this.speedX;  //update speedX
            this.y += this.speedY;  //update speedY
            if (this.size > 0.1) this.size -= 0.03; //update size
        }
        draw(){
            ctx.fillStyle = this.color; // color of the particle
            ctx.beginPath(); // start a new path
            ctx.arc(this.x, this.y, this.size, 0, Math.PI * 2); // x, y, radius, startAngle, endAngle
            ctx.fill(); // fill the circle
        }
    }

    function handleParticle(){
        for (let i = 0; i < spots.length; i++) {    
            spots[i].update();  // update position
            spots[i].draw();    // draw the particle
            for (let j = i; j< spots.length; j++) { // check for collisions
                const dx = spots[i].x - spots[j].x; // x distance
                const dy = spots[i].y - spots[j].y; // distance between two particles
                const distance = Math.sqrt(dx * dx + dy * dy);  // distance between two points
                if (distance < 90){
                    ctx.beginPath(); // start a new path
                    ctx.strokeStyle = spots[i].color; // color of the lines
                    ctx.lineWidth = spots[i].size / 10; // width of the line
                    ctx.moveTo(spots[i].x, spots[i].y); // start point
                    ctx.lineTo(spots[j].x, spots[j].y); // end point
                    ctx.stroke(); // draw the line
                }
            }
            if (spots[i].size <= 0.3){
                spots.splice(i, 1); i--;    // remove the particle
            }
        }
    }

    function animate(){
        ctx.clearRect(0, 0, canvas.width, canvas.height); // clear the canvas
        handleParticle();
        //change hue between #7E52A0 and #FFF8E1
        // hue += 0.1;
        // if (hue >= 360) hue = 0;        
        requestAnimationFrame(animate); // call animate again
    }

    window.addEventListener("resize", function(){
        canvas.width = window.innerWidth;
        canvas.height = window.innerHeight;
    });

    window.addEventListener('mouseout', function(){
        mouse.x = undefined;
        mouse.y = undefined;
        Infinity/0;
    });

    animate();
    
</script>